#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <iostream>
#include "Zork.hpp"
#include "Room.hpp"
#include "npcdialogui.hpp"
#include <QString>  
#include <QObject>
#include <QShortcut>

#define DIAG_FONT_SIZE 25

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent), ui(new Ui::MainWindow)
{
    this->zork = std::make_shared<Game::Zork>(); //create an instance of Zork
    ui->setupUi(this); //Auto-generated by Qt
    #ifndef ZORK_DEBUG //only fullscreen in non-debug mode
    this->setWindowState(Qt::WindowFullScreen);
    #endif
    ui->DIALOGUEBOX->setFontPointSize(DIAG_FONT_SIZE);
    this->setWindowTitle("Pork - The Pop-Culture Zork!");

    ui->WORLDLIST->clear();
    for (size_t i = 0; i < zork->GetWorldAmount(); i++) { //Add each World to the QListWidget of Worlds
        Game::World* world = zork->GetWorld(i);
        if (world) {
            ui->WORLDLIST->addItem(QString::fromStdString(world->GetWorldName()));
        }
    }

    this->UpdateRoomDialogueUI();
    this->UpdateRoomItemsUI();

    this->map = new Ui::MapWidget(this->zork, ui->PAINTWIDGET);
    ui->MAPGRID->replaceWidget(ui->PAINTWIDGET, this->map); //swap widget with our custom MapWidget instance, can't add custom widget from Qt designer
    ui->PAINTWIDGET->hide();

    this->roomItemsWidget = new Ui::QListStorageWidget<Game::Item>(ui->ROOMITEMS);
    this->roomItemsWidget->setFocusPolicy(Qt::FocusPolicy::NoFocus);
    ui->gridLayout->replaceWidget(ui->ROOMITEMS, this->roomItemsWidget); //same widget swap as before but for item list.
    ui->ROOMITEMS->hide();

    connect(this->roomItemsWidget, SIGNAL(itemDoubleClicked(QListWidgetItem*)), this, SLOT(roomItemsUI_DoubledClick(QListWidgetItem*))); //Connecting double click signal with item "pickup"
}

MainWindow::~MainWindow() {
    delete this->map;
    delete this->roomItemsWidget;
    delete ui;
}

void MainWindow::UpdateRoomDialogueUI() {
    ui->DIALOGUEBOX->clear(); //clear dialogue on room enter

    Game::Room* curRoom = this->zork->GetCurrentRoom();
    if (!curRoom) { //Check incase not in world
        return;
    }
    ui->DIALOGUEBOX->textCursor().insertText(QString::fromStdString(curRoom->GetRoomDialogue())); //set the dialogue to the room's current dialogue
}

void MainWindow::UpdateRoomItemsUI() {
    Game::Room* curRoom = this->zork->GetCurrentRoom();
    if (!curRoom) { //Check incase not in world
        return;
    }

    this->roomItemsWidget->clear(); //clear room item list
    for (size_t i = 0; i < curRoom->GetRoomItemAmount(); i++) {
        Game::Item item;
        if (curRoom->GetItem(i, item)) { //get item from room based on index (returns bool)
            this->roomItemsWidget->addItemWithStorage(item); //if item was got successfully (bool above), add it to our custom widget
        }
    }
    this->map->UpdateMapUI(); //update the map
}

void MainWindow::UpdateInventoryUI() {
    ui->INVENTORYLIST->clear();
    for (size_t i = 0; i < zork->GetInventoryItemAmount(); i++) {
        Game::Item item;
        if (zork->GetItemFromInventory(i, item)) { //get item from inventory based on index (returns bool)
            ui->INVENTORYLIST->addItem(QString::fromStdString(item.GetName())); //if item was got successfully (bool above), add it to the list widget
        }
    }
}

//Advanced preprocessor - uses preprocessor macro for each of the move directions. Also uses custom exceptions
#define MOVE_FUNC(SLOT_NAME, MOVE_DIR) \
    void MainWindow::on_DPAD_##SLOT_NAME##_clicked() { \
        try { \
        this->zork->Move##MOVE_DIR(); \
        this->map->UpdateMapUI(); \
        this->UpdateRoomItemsUI(); \
        this->UpdateRoomDialogueUI(); \
        this->CheckNPC(); \
        \
        } catch (const Game::ZorkException& e) { \
            std::cout << e.what() << std::endl; \
        } \
    }

MOVE_FUNC(UP, North)
MOVE_FUNC(DOWN, South)
MOVE_FUNC(LEFT, West)
MOVE_FUNC(RIGHT, East)

void MainWindow::CheckNPC() {
    if (this->zork->GetCurrentWorld()->HasCollectedKeyItem()) { //dont spawn NPC if has key item
        return;
    }

    Game::Room* room = this->zork->GetCurrentRoom();
    if (room) {
        if (room->HasNpc()) { //if current room has an NPC
            Game::Npc npc = this->zork->GetCurrentWorld()->GetNpc();
            NpcDialogUI dialog(npc, this);
            dialog.exec(); //Opens the NPC Dialogue Window. "exec" function holds the program until the dialogue window is closed. 

            if (dialog.result() == NpcDialogUIResult_Yes) {
                zork->AddItemToInventory(npc.GetKeyItem()); //If correct answer, then adds key item to inventory
                this->UpdateInventoryUI();
            }
        }
    }
}

void MainWindow::on_WORLDLIST_currentRowChanged(int currentRow) { //QT Designer slot for currentRowChanged
    if (this->zork->SetWorld(currentRow)) {
        this->map->UpdateMapUI();
        UpdateRoomItemsUI();
        UpdateRoomDialogueUI();
    }
}

void MainWindow::roomItemsUI_DoubledClick(QListWidgetItem *item) {
    Game::Room* room = this->zork->GetCurrentRoom();
    if (room == nullptr)
        return;

    Game::Item storageItem;
    if (roomItemsWidget->getItemFromStorage(item, storageItem, false)) {
        for (size_t i = 0; i < room->GetRoomItemAmount(); i++) {
            Game::Item checkItem;
            if (room->GetItem(i, checkItem)) { //get item from room based on index (returns bool)
                if (checkItem == storageItem) { //use Item operator== (by id)
                    zork->AddItemToInventory(storageItem);
                    roomItemsWidget->removeItemWithStorage(storageItem); //remove item from storage widget
                    room->RemoveItem(i); //remove item from room
                    break;
                }
            }
        }
    }

    this->UpdateRoomItemsUI();
    this->UpdateInventoryUI();
}

void MainWindow::on_QUITBUTTON_clicked() {
    qApp->exit();
}
