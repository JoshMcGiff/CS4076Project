Levels
Indicator
  of expected implementation for project
Interview
Level 1
Maximum A1


TODO:
Friendship:
Definition of template classes     
dynamic_cast:
Definition of template functions:
Advanced pre-processor directives:     
C++ Object Construction Sequence:
Operator overloading:

·        
  Virtual                         ------                (virtual function in Room class, Special Room overwrites with it's own)
  functions                                       (Or use in UI lmao 😂😂😂😂😂😂😂😂😂)
·        
  Definition of                                   
  template classes                                
·        
  Multiple inheritance          -----------          (RoomBase -> Room -> SpecialRoom)
·        
  namespaces                      --------        (USED EVERYWHERE)
·        
  Programmer defined exceptions    ----------      (try to move without being in a world (Zork.cpp))
·        
  Unions       ------                                   (Used in World Class with different Room types)
·        
  dynamic_cast                                    (e.g. casting Room to Special Room)
·        
  ALL LEVEL 2



Mandatory
Level 2
Maximum B1
·        
  Definition of
  template functions                              (Anytime we need to use function overloading lmao)
·        
  Operator overloading                            (For adding Items to a Room (<<))
·        
  Abstract classes          -------                    (RoomBase class)  
·        
  Copy constructors (deep , shallow copy)         (Used somewhere, probably Item)
·        
  Bit structures            -------                      (Used for attributes in Items/Rooms)
·        
  Advanced pre-processor
  directives
·        
  C++ Object
  Construction Sequence     (What does he mean exactly by this? Does he just mean inheritance, or does he mean we need to show/print the order of object construction)
·        
  Initializer List      -----                          Used in class ctors
·        
  ALL LEVEL 1

Randomly 
Level 3
Maximum C1
·        
  C++ References         -------           (Add Item to a Room)
·        
  Pointers               -------           (World class room array)
·        
  Inheritance            -------           (RoomBase -> Room)
·        
  Destructors             -----          (Zork class)
·        
  Memory management      -------           (Making a World in Zork class, deleting in Zork class dtor)
·        
  Header files (inclusion guards) ----   (Used everywher)
·        
  Arrays and pointers  -------------           (World names, pass character array to a pointer argument)
·        
  Friendship
·        
  Basic pre-processor directives -------    (#ifdef DEBUG)
·        
  Global variables    -------             (LMAO NOT USED)
·        
  Private, Public,    -------                 (USED IN EVERY CLASS EVER)
  Protected
 


Not
  required normally